<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util-4.0.xsd "
	default-lazy-init="true">

	<bean id="credentialsMatcher" class="com.webside.shiro.LimitRetryCredentialsMatcher">
		<!-- hashAlgorithmName必须的，没有默认值。可以有MD5或者SHA-1，如果对密码安全有更高要求可以用SHA-256或者更高。 
			这里使用MD5 storedCredentialsHexEncoded默认是true，此时用的是密码加密用的是Hex编码；false时用Base64编码 
			hashIterations迭代次数，默认值是1。 -->
		<constructor-arg index="0" name="cacheManager" ref="cacheManager"/>
		<constructor-arg index="1" name="redisManager" ref="redisManager"/>
		<!-- RetryLimitHashedCredentialsMatcher继承父类HashedCredentialsMatcher，需要给父类注入以下属性 -->
		<property name="hashAlgorithmName" value="MD5" />
		<property name="hashIterations" value="${shiro.hashIterations}" />
		<!-- 是否存储散列后的密码为16进,制这里需要和注册时使用的加密方式一样，都使用MD5加密，然后转为base64,密码匹配也需和注册时的加密方式一致 -->
		<property name="storedCredentialsHexEncoded" value="false" />
	</bean>

	<!--自定义Realm -->
	<bean id="myDBRealm" class="com.webside.shiro.MyDBRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher" />
		<!-- 开启缓存 -->
		<property name="cachingEnabled" value="true" />
		<!-- 认证信息:这里不进行缓存 -->
		<property name="authenticationCachingEnabled" value="false" />
		<!-- cache中配置的认证缓存名称 -->
		<property name="authenticationCacheName" value="authenticationCache" />
		<!-- 授权信息:这里进行缓存 -->
		<property name="authorizationCachingEnabled" value="true" />
		<!-- cache中配置的授权缓存名称 -->
		<property name="authorizationCacheName" value="authorizationCache" />
	</bean>

	<!-- 凭证匹配器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app. If you have multiple realms, use the 'realms' property 
			instead. -->
		<property name="realm" ref="myDBRealm" />
		<property name="sessionManager" ref="sessionManager" />
		<!-- 使用下面配置的缓存管理器 -->
		<property name="cacheManager" ref="cacheManager" />
		<property name="rememberMeManager" ref="rememberMeManager" />
	</bean>

	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>
	
	<!-- 会话Session ID生成器 -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

	<!-- 会话Cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="WEBSIDE_SID" />
		<property name="httpOnly" value="true" />
		<!--cookie的有效时间 -->
		<property name="maxAge" value="-1" />
	</bean>

	<!-- 记住我Cookie模板 -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="WEBSIDE_REM_SID" />
		<property name="httpOnly" value="true" />
		<!--cookie的有效时间 -->
		<property name="maxAge" value="604800" /><!-- 7天时间，记住我一周 -->
	</bean>

	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位） -->
		<!-- 实际密码是webside -->
		<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('GsHaWo4m1eNbE0kNSMULhg==')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>

	<!-- 用户会话session控制 -->
	<bean id="kickoutFilter" class="com.webside.shiro.filter.KickoutSessionFilter"/>
	<!-- kickout Filter -->
	<bean id="kickoutAuthFilter" class="com.webside.shiro.filter.KickoutAuthFilter"/>
	<!-- user Filter -->
	<bean id="loginFilter" class="com.webside.shiro.filter.LoginFilter"/>
	<bean id="rememberMeFilter" class="com.webside.shiro.filter.RememberMeFilter"/>
	<bean id="permissionFilter" class="com.webside.shiro.filter.PermissionFilter"/>
	<bean id="roleFilter" class="com.webside.shiro.filter.RoleFilter"/>
	<bean id="baseUrl" class="com.webside.shiro.filter.URLFilter"/>

	<!-- ssl过滤 -->
	 <bean id="sslFilter" class="org.apache.shiro.web.filter.authz.SslFilter">
        <property name="port" value="8443"/>
    </bean>

	<bean id="chainDefinitionService" class="com.webside.shiro.service.impl.ChainDefinitionServiceImpl" />

	<!-- 配置shiro的过滤器工厂类，这里bean的id shiroFilter要和我们在web.xml中配置的shior过滤器名称一致<filter-name>shiroFilter</filter-name> -->
	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- shiro的核心安全接口 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接 -->
		<property name="loginUrl" value="/login.html" />
		<!-- 登陆成功后要跳转的连接 -->
		<property name="successUrl" value="/index.html" />
		<!-- 未授权时要跳转的连接 -->
		<property name="unauthorizedUrl" value="/denied.jsp" />

		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
		<!-- 动态加载权限 -->
		<property name="filterChainDefinitions" value="#{chainDefinitionService.initFilterChainDefinitions()}" />
		<!-- 这里暂时静态加载方式 -->
		<!-- <property name="filterChainDefinitions"> <value> /login.html = authc 
			/logout.html = logout /register.html = anon /captcha.html = anon /denied.jsp 
			= anon /resources/** = anon /view/error/** = anon /*/withoutAuth/** = anon 
			/** = authc </value> </property> -->
		<!-- 自定义过滤器 -->
		<property name="filters">
			<map>
				<entry key="kickout" value-ref="kickoutFilter" />
				<entry key="kickoutAuth" value-ref="kickoutAuthFilter"/>
				<entry key="login" value-ref="loginFilter" />
				<entry key="remember" value-ref="rememberMeFilter"/>
				<entry key="perm" value-ref="permissionFilter"/>
				<entry key="roles" value-ref="roleFilter"/>
				<entry key="baseUrl" value-ref="baseUrl"/>
				<entry key="ssl" value-ref="sslFilter"></entry>
			</map>
		</property>
	</bean>
	
	<!-- 会话验证quartz实现，升级shiro到1.2.6以上之后，SimpleTrigger变成了接口， 解决办法有两种： 
		1、自己重新实现SessionValidationScheduler类，QuartzSessionValidationScheduler implements SessionValidationScheduler 
		2、使用ExecutorServiceSessionValidationScheduler代替QuartzSessionValidationScheduler -->
	<bean id="sessionValidationScheduler" class="com.webside.shiro.session.validation.QuartzSessionValidationScheduler">
		<property name="sessionValidationInterval" value="${shiro.session.validate.interval}" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>


	<!-- 会话验证shiro实现 -->
	<!-- 全局的会话信息检测扫描信息间隔60分钟 -->
	<!-- <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler"> 
		<property name="interval" value="${shiro.session.validate.interval}" /> <property 
		name="sessionManager" ref="shiroSessionManager" /> </bean> -->


	<!-- 会话管理器 -->
	<!-- 全局的会话信息设置成30分钟,sessionValidationSchedulerEnabled参数就是是否开启扫描 -->
	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 是否删除无效的，默认也是开启 -->
		<property name="deleteInvalidSessions" value="true" />
		<!-- 这里可以选择使用ehcache或redis两种保存session的方式，具体视个人情况
		1、ehcache实现：ehcacheShiroSessionDAO
		2、redis实现	 ：redisShiroSessionDAO
		 -->
		<property name="sessionDAO" ref="redisShiroSessionDAO" />
		<!-- session 有效时间为半小时 （毫秒单位） -->
		<property name="globalSessionTimeout" value="${shiro.session.timeout}" />
		<!-- 相隔多久检查一次session的有效性 -->
		<property name="sessionValidationInterval" value="${shiro.session.validate.interval}" />
		<!-- 是否开启 检测，默认开启 -->
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
		<!-- 会话Cookie模板 -->
		<property name="sessionIdCookie" ref="sessionIdCookie" />
		<!-- session 监听，可以有多个 -->
	   <property name="sessionListeners">
	       <list>
	           <ref bean="shiroSessionListener"/>
	       </list>
	   </property>
	</bean>
	
	
	<!--shiro session管理器 
		shiroCacheManager有两种选择：
		1、ehcache实现：EnterpriseCacheSessionDAO
		2、redis实现	 ：ShiroSessionDAO extends AbstractSessionDAO
	-->
	<!-- ehcache shiro session dao -->
	<bean id="ehcacheShiroSessionDAO"
		class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache" />
		<property name="sessionIdGenerator" ref="sessionIdGenerator" />
	</bean>

	<!-- redis shiro session dao -->
	<bean id="redisShiroSessionDAO" class="com.webside.shiro.session.ShiroSessionDAO">
	    <property name="shiroSessionRepository" ref="redisShiroSessionRepository"/>
	    <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	</bean>
	
	<bean id="redisShiroSessionRepository" class="com.webside.shiro.session.redis.RedisShiroSessionRepository">
		<property name="redisManager" ref="redisManager"/>
	</bean>
	
	
	<!--shiro cache管理器
		shiroCacheManager有两种选择：
		1、ehcache实现：ehcacheShiroCacheManager
		2、redis实现	 ：redisShiroCacheManager
	-->
	<bean id="cacheManager" class="com.webside.shiro.cache.CustomShiroCacheManager">
		<!-- 这里可以选择使用ehcache或redis两种缓存实现方式，具体视个人情况
		1、ehcache实现：ehcacheShiroCacheManager
		2、redis实现	 ：redisShiroCacheManager
		 -->
		<property name="shiroCacheManager" ref="redisShiroCacheManager" />
	</bean>

	
	<!--ehcache cache管理器 -->
	<bean id="ehcacheShiroCacheManager" class="com.webside.shiro.cache.ehcache.EhCacheShiroCacheManager">
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>
	
	<!--redis cache管理器 -->
	<bean id="redisShiroCacheManager" class="com.webside.shiro.cache.redis.RedisShiroCacheManager">
		<property name="cacheManager" ref="redisManager" />
	</bean>
	
	<bean id="redisManager" class="com.webside.redis.RedisManager">
		<property name="jedisPool" ref="jedisPool"/>
	</bean>
	 
	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

</beans>
